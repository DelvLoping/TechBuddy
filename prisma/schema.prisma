// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  lastname            String
  firstname           String
  email               String              @unique
  password            String
  age                 Int?
  addressId           Int?
  type                UserType            @default(TECHBUDDY)
  signupDate          DateTime            @default(now())
  helpRequests        HelpRequest[]
  applications        HelperApplication[]
  chat1               Chat[]              @relation("User1Chats")
  chat2               Chat[]              @relation("User2Chats")
  messages            Message[]
  evaluationsGiven    Evaluation[]        @relation("EvaluatorEvaluations")
  evaluationsReceived Evaluation[]        @relation("EvaluateeEvaluations")
  aiChats             AIChat[]
  address             Address?            @relation(fields: [addressId], references: [id])
}

model HelpRequest {
  id                    Int                 @id @default(autoincrement())
  userId                Int
  subject               String
  description           String
  requestDate           DateTime            @default(now())
  interventionDate      DateTime?
  interventionType      InterventionType
  reward                String?
  interventionAddressId Int?
  status                RequestStatus       @default(OPEN)
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications          HelperApplication[]
  chats                 Chat[]
  evaluations           Evaluation[]
  interventionAddress   Address?            @relation(fields: [interventionAddressId], references: [id])
}

model HelperApplication {
  id              Int               @id @default(autoincrement())
  requestId       Int
  helperId        Int
  applicationDate DateTime          @default(now())
  status          ApplicationStatus @default(PROPOSED)
  helpRequest     HelpRequest       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  helper          User              @relation(fields: [helperId], references: [id], onDelete: Cascade)
}

model Chat {
  id           Int         @id @default(autoincrement())
  requestId    Int
  user1Id      Int
  user2Id      Int
  creationDate DateTime    @default(now())
  helpRequest  HelpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user1        User        @relation("User1Chats", fields: [user1Id], references: [id], onDelete: Cascade)
  user2        User        @relation("User2Chats", fields: [user2Id], references: [id], onDelete: Cascade)
  messages     Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  chatId   Int
  userId   Int
  content  String
  sendDate DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Evaluation {
  id             Int         @id @default(autoincrement())
  requestId      Int
  evaluatorId    Int
  evaluateeId    Int
  rating         Rate
  comment        String?
  evaluationDate DateTime    @default(now())
  helpRequest    HelpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  evaluator      User        @relation("EvaluatorEvaluations", fields: [evaluatorId], references: [id], onDelete: Cascade)
  evaluatee      User        @relation("EvaluateeEvaluations", fields: [evaluateeId], references: [id], onDelete: Cascade)
}

model AIChat {
  id       Int      @id @default(autoincrement())
  userId   Int
  question String
  answer   String
  chatDate DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id         Int           @id @default(autoincrement())
  street     String
  city       String
  postalCode String
  country    String
  users      User[]
  requests   HelpRequest[]
}

enum UserType {
  TECHBUDDY
  HELPER
  ADMIN
}

enum InterventionType {
  VIRTUAL
  IN_PERSON
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum ApplicationStatus {
  PROPOSED
  ACCEPTED
  REJECTED
}

enum Rate {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}
